//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/DefaultInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInput"",
    ""maps"": [
        {
            ""name"": ""Charachter"",
            ""id"": ""8f5a987f-2ad1-44a7-b5fa-395880df972d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""06873c82-d4d6-4397-b17a-81790670be25"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3a4f1e73-3029-4fb1-8115-fa02fd6a83a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""50c82382-39e3-41b8-83f5-4c56d1b97761"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""ce381c86-5cb1-406d-89f3-36a644a0f936"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Prone"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9bb24bfc-0773-4742-a690-cbe4466f7989"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""71d59d46-d121-461a-b18f-2d33e49a9680"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintReleased"",
                    ""type"": ""Button"",
                    ""id"": ""41b7f617-8b32-4357-8585-c16b4bc87419"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5c368479-464f-429b-bc26-e064441bd962"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""67448bbd-7d80-4eac-a90d-4ac2f7859a46"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ecfb66f1-9c6a-414f-a52a-87b408f2a975"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1496eca5-5ab1-41d3-a213-c16cfab2dab9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b4190e36-271a-433f-93e6-73b6a263761d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2a61b496-2a44-4c6a-90eb-48493fef1584"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""38c5f5ca-bb65-47f7-87de-6598470fc154"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df2fbe81-5e66-4291-b896-d6ef8e264065"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11ec2aff-2155-49d5-a90c-8b383a026c95"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Prone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ca3d9ed-ba90-4146-96bd-87ec16fbd3de"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Prone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41ccc004-3d4a-4f35-a2d6-0ec5b3029fe8"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""594da06a-3a41-4083-8f70-6664ee533d25"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Charachter
        m_Charachter = asset.FindActionMap("Charachter", throwIfNotFound: true);
        m_Charachter_Movement = m_Charachter.FindAction("Movement", throwIfNotFound: true);
        m_Charachter_View = m_Charachter.FindAction("View", throwIfNotFound: true);
        m_Charachter_Jump = m_Charachter.FindAction("Jump", throwIfNotFound: true);
        m_Charachter_Crouch = m_Charachter.FindAction("Crouch", throwIfNotFound: true);
        m_Charachter_Prone = m_Charachter.FindAction("Prone", throwIfNotFound: true);
        m_Charachter_Sprint = m_Charachter.FindAction("Sprint", throwIfNotFound: true);
        m_Charachter_SprintReleased = m_Charachter.FindAction("SprintReleased", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Charachter
    private readonly InputActionMap m_Charachter;
    private ICharachterActions m_CharachterActionsCallbackInterface;
    private readonly InputAction m_Charachter_Movement;
    private readonly InputAction m_Charachter_View;
    private readonly InputAction m_Charachter_Jump;
    private readonly InputAction m_Charachter_Crouch;
    private readonly InputAction m_Charachter_Prone;
    private readonly InputAction m_Charachter_Sprint;
    private readonly InputAction m_Charachter_SprintReleased;
    public struct CharachterActions
    {
        private @DefaultInput m_Wrapper;
        public CharachterActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Charachter_Movement;
        public InputAction @View => m_Wrapper.m_Charachter_View;
        public InputAction @Jump => m_Wrapper.m_Charachter_Jump;
        public InputAction @Crouch => m_Wrapper.m_Charachter_Crouch;
        public InputAction @Prone => m_Wrapper.m_Charachter_Prone;
        public InputAction @Sprint => m_Wrapper.m_Charachter_Sprint;
        public InputAction @SprintReleased => m_Wrapper.m_Charachter_SprintReleased;
        public InputActionMap Get() { return m_Wrapper.m_Charachter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharachterActions set) { return set.Get(); }
        public void SetCallbacks(ICharachterActions instance)
        {
            if (m_Wrapper.m_CharachterActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CharachterActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharachterActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharachterActionsCallbackInterface.OnMovement;
                @View.started -= m_Wrapper.m_CharachterActionsCallbackInterface.OnView;
                @View.performed -= m_Wrapper.m_CharachterActionsCallbackInterface.OnView;
                @View.canceled -= m_Wrapper.m_CharachterActionsCallbackInterface.OnView;
                @Jump.started -= m_Wrapper.m_CharachterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharachterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharachterActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_CharachterActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_CharachterActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_CharachterActionsCallbackInterface.OnCrouch;
                @Prone.started -= m_Wrapper.m_CharachterActionsCallbackInterface.OnProne;
                @Prone.performed -= m_Wrapper.m_CharachterActionsCallbackInterface.OnProne;
                @Prone.canceled -= m_Wrapper.m_CharachterActionsCallbackInterface.OnProne;
                @Sprint.started -= m_Wrapper.m_CharachterActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_CharachterActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_CharachterActionsCallbackInterface.OnSprint;
                @SprintReleased.started -= m_Wrapper.m_CharachterActionsCallbackInterface.OnSprintReleased;
                @SprintReleased.performed -= m_Wrapper.m_CharachterActionsCallbackInterface.OnSprintReleased;
                @SprintReleased.canceled -= m_Wrapper.m_CharachterActionsCallbackInterface.OnSprintReleased;
            }
            m_Wrapper.m_CharachterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @View.started += instance.OnView;
                @View.performed += instance.OnView;
                @View.canceled += instance.OnView;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Prone.started += instance.OnProne;
                @Prone.performed += instance.OnProne;
                @Prone.canceled += instance.OnProne;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @SprintReleased.started += instance.OnSprintReleased;
                @SprintReleased.performed += instance.OnSprintReleased;
                @SprintReleased.canceled += instance.OnSprintReleased;
            }
        }
    }
    public CharachterActions @Charachter => new CharachterActions(this);
    public interface ICharachterActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnView(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnProne(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnSprintReleased(InputAction.CallbackContext context);
    }
}
